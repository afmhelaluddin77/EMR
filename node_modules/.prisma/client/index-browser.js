
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  department: 'department',
  specialization: 'specialization',
  licenseNumber: 'licenseNumber',
  phoneNumber: 'phoneNumber',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  active: 'active',
  firstName: 'firstName',
  lastName: 'lastName',
  gender: 'gender',
  birthDate: 'birthDate',
  phoneNumber: 'phoneNumber',
  email: 'email',
  address: 'address',
  emergencyContact: 'emergencyContact',
  insurance: 'insurance',
  allergies: 'allergies',
  chronicConditions: 'chronicConditions',
  registrationDate: 'registrationDate',
  lastVisitDate: 'lastVisitDate',
  nextAppointmentDate: 'nextAppointmentDate',
  createdBy: 'createdBy'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  status: 'status',
  patientId: 'patientId',
  doctorId: 'doctorId',
  department: 'department',
  room: 'room',
  startTime: 'startTime',
  endTime: 'endTime',
  description: 'description',
  notes: 'notes',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  billingStatus: 'billingStatus',
  insuranceInfo: 'insuranceInfo',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicalExaminationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  encounterId: 'encounterId',
  dateTime: 'dateTime',
  examiner: 'examiner',
  examinationType: 'examinationType',
  findings: 'findings',
  impression: 'impression',
  recommendations: 'recommendations',
  nextFollowUp: 'nextFollowUp'
};

exports.Prisma.VitalSignsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  dateTime: 'dateTime',
  temperature: 'temperature',
  bloodPressure: 'bloodPressure',
  heartRate: 'heartRate',
  respiratoryRate: 'respiratoryRate',
  oxygenSaturation: 'oxygenSaturation',
  height: 'height',
  weight: 'weight',
  bmi: 'bmi',
  notes: 'notes',
  recordedBy: 'recordedBy'
};

exports.Prisma.MedicineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  genericName: 'genericName',
  brandName: 'brandName',
  strength: 'strength',
  form: 'form',
  route: 'route',
  category: 'category',
  therapeuticClass: 'therapeuticClass',
  indications: 'indications',
  contraindications: 'contraindications',
  sideEffects: 'sideEffects',
  interactions: 'interactions',
  dosage: 'dosage',
  precautions: 'precautions',
  pregnancyCategory: 'pregnancyCategory',
  breastfeeding: 'breastfeeding',
  storage: 'storage',
  manufacturer: 'manufacturer',
  price: 'price',
  availability: 'availability',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  prescriberId: 'prescriberId',
  datePrescribed: 'datePrescribed',
  medications: 'medications',
  diagnosis: 'diagnosis',
  instructions: 'instructions',
  duration: 'duration',
  refills: 'refills',
  status: 'status',
  pharmacy: 'pharmacy',
  notes: 'notes',
  followUpDate: 'followUpDate'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  category: 'category',
  key: 'key',
  value: 'value',
  description: 'description',
  isActive: 'isActive',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  PHARMACIST: 'PHARMACIST',
  LAB_TECHNICIAN: 'LAB_TECHNICIAN',
  RECEPTIONIST: 'RECEPTIONIST',
  BILLING_ADMIN: 'BILLING_ADMIN',
  PATIENT: 'PATIENT'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  UNKNOWN: 'UNKNOWN'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PROPOSED: 'PROPOSED',
  PENDING: 'PENDING',
  BOOKED: 'BOOKED',
  ARRIVED: 'ARRIVED',
  FULFILLED: 'FULFILLED',
  CANCELLED: 'CANCELLED',
  NOSHOW: 'NOSHOW',
  ENTERED_IN_ERROR: 'ENTERED_IN_ERROR',
  CHECKED_IN: 'CHECKED_IN',
  WAITLIST: 'WAITLIST'
};

exports.BillingStatus = exports.$Enums.BillingStatus = {
  PENDING: 'PENDING',
  BILLED: 'BILLED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.ExaminationType = exports.$Enums.ExaminationType = {
  GENERAL: 'GENERAL',
  CARDIOVASCULAR: 'CARDIOVASCULAR',
  RESPIRATORY: 'RESPIRATORY',
  GASTROINTESTINAL: 'GASTROINTESTINAL',
  NEUROLOGICAL: 'NEUROLOGICAL',
  MUSCULOSKELETAL: 'MUSCULOSKELETAL',
  DERMATOLOGICAL: 'DERMATOLOGICAL'
};

exports.MedicineForm = exports.$Enums.MedicineForm = {
  TABLET: 'TABLET',
  CAPSULE: 'CAPSULE',
  LIQUID: 'LIQUID',
  INJECTION: 'INJECTION',
  CREAM: 'CREAM',
  OINTMENT: 'OINTMENT',
  DROPS: 'DROPS',
  INHALER: 'INHALER',
  SUPPOSITORY: 'SUPPOSITORY'
};

exports.MedicineRoute = exports.$Enums.MedicineRoute = {
  ORAL: 'ORAL',
  INTRAVENOUS: 'INTRAVENOUS',
  INTRAMUSCULAR: 'INTRAMUSCULAR',
  SUBCUTANEOUS: 'SUBCUTANEOUS',
  TOPICAL: 'TOPICAL',
  INHALATION: 'INHALATION',
  RECTAL: 'RECTAL',
  VAGINAL: 'VAGINAL'
};

exports.PregnancyCategory = exports.$Enums.PregnancyCategory = {
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  X: 'X'
};

exports.BreastfeedingStatus = exports.$Enums.BreastfeedingStatus = {
  SAFE: 'SAFE',
  CAUTION: 'CAUTION',
  AVOID: 'AVOID'
};

exports.MedicineAvailability = exports.$Enums.MedicineAvailability = {
  AVAILABLE: 'AVAILABLE',
  LIMITED: 'LIMITED',
  UNAVAILABLE: 'UNAVAILABLE'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

exports.Prisma.ModelName = {
  User: 'User',
  AuthSession: 'AuthSession',
  AuditLog: 'AuditLog',
  Patient: 'Patient',
  Appointment: 'Appointment',
  ClinicalExamination: 'ClinicalExamination',
  VitalSigns: 'VitalSigns',
  Medicine: 'Medicine',
  Prescription: 'Prescription',
  SystemSetting: 'SystemSetting',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
